# KDiff Snapshots Helm Chart Configuration
# This chart deploys a CronJob that runs KDiff snapshots using Steampipe

# Name overrides
nameOverride: ""
fullnameOverride: ""

# Debug mode - when enabled, the container will sleep infinitely instead of running the job
debug: false

# Global configuration
global:
  # Steampipe database password used for DB connections
  steampipeDatabasePassword: "Kj8mP2vN9xQ7tR5wL3cY1hB4nM6sD0pF"

# CronJob Configuration
# https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/
timeZone: 'Asia/Istanbul'  # Timezone for the cron job
schedule: "00 20 * * *"    # Cron schedule (daily at 8 PM)

# Container image configuration
image:
  repository: ghcr.io/oguzhan-yilmaz/kdiff-snapshots
  tag: ""  # Defaults to Chart.AppVersion
  pullPolicy: Always

# Image pull secrets for private registries
imagePullSecrets: []

# Container port for Steampipe
containerPort: 9193


# Pod configuration
podAnnotations: {}
podSecurityContext:    
  fsGroup: 11234

# Container security context
securityContext:
  runAsUser: 11234
  runAsGroup: 11234
  runAsNonRoot: true

# Resource limits and requests
resources: {}
# Example:
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

# Node selector for pod placement
nodeSelector: {}

# Tolerations for pod scheduling
tolerations: []

# Affinity rules for pod placement
affinity: {}

# Service Account configuration
serviceAccount:
  create: true
  annotations: {}
  # name: "existing-service-account"  # Use existing SA (set create: false)
  
  # AWS IRSA (IAM Roles for Service Accounts) configuration
  # When enabled, the ServiceAccount will assume an IAM role instead of using static credentials
  awsIrsa:
    enabled: false
    # The ARN of the IAM role to assume
    roleArn: ""
    # AWS region for the role
    region: "eu-west-1"
    # Additional IAM policy ARNs to attach (optional)
    additionalPolicyArns: []
    # Example:
    # additionalPolicyArns:
    #   - "arn:aws:iam::123456789012:policy/MyCustomPolicy"

# Environment variables for Steampipe


envVars:
  # Install Steampipe plugins at runtime (space-separated)
  # Available plugins: https://hub.steampipe.io/
  INSTALL_STEAMPIPE_PLUGINS: >
    kubernetes
  
  # AWS profile configuration (if using AWS credentials)
  # AWS_PROFILE: "default"

# Secret environment variables
secretEnvVars: 
  AWS_ACCESS_KEY_ID: ""
  AWS_SECRET_ACCESS_KEY: ""
  # Change endpoint AWS_ENDPOINT_URL_S3 with S3-compatible storage
  # AWS_ENDPOINT_URL_S3: 'https://my-minio-instance.mycompany.com'
  S3_BUCKET_NAME: ""
  S3_UPLOAD_PREFIX: "my-kdiff-snapshots/dev/"



# Steampipe credential files to mount as secrets
# Files will be placed in ~/{directory}/{filename}
steampipeSecretCredentials: {}
# steampipeSecretCredentials:
#   - name: kubeconfig
#     directory: ".kube"
#     filename: "config"
#     content: |
#       apiVersion: v1
#       kind: Config
#       clusters:
#       - name: my-cluster
#         cluster:
#           server: https://kubernetes.default.svc


# Steampipe configuration files
# Files will be mounted to ~/.steampipe/config/{key}
# Documentation: https://steampipe.io/docs/reference/config-files/overview
steampipeConfig: {}
# steampipeConfig:
#   kubernetes.spc: |
#     connection "kubernetes" {
#       plugin         = "kubernetes"
#       config_path    = "~/.kube/config"
#       config_context = "myCluster"
#       source_types   = ["deployed"]
#     }

# SQL scripts to run during database initialization
initDbSqlScripts: {}
# initDbSqlScripts:
#   init.sql: |
#     CREATE TABLE IF NOT EXISTS custom_table (
#       id SERIAL PRIMARY KEY,
#       name VARCHAR(255)
#     );


# Environment variables from existing secrets
envVarSecretReferences: []
# envVarSecretReferences:
#   - name: KDIFF_ADMIN_PASSWORD
#     valueFrom:
#       secretKeyRef:
#         name: kdiff-initial-admin-secret
#         key: password


# Custom command to run instead of default entrypoint
customCommand: []
# customCommand:
#   - "/bin/bash"
#   - "-c"
#   - "echo 'Custom command executed'"

# Additional Kubernetes objects to create
extraObjects: []
# Example:
# - apiVersion: v1
#   kind: Secret
#   metadata:
#     name: extra-secret
#   type: Opaque
#   stringData:
#     AAA: BBB